require 'codeclimate-test-reporter'
CodeClimate::TestReporter.start

require 'webmock/rspec'
WebMock.disable_net_connect!(allow: 'codeclimate.com')
require 'slash'
require 'slashdeploy'

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true

    # This option should be set when all dependencies are being loaded
    # before a spec run, as is the case in a typical spec helper. It will
    # cause any verifying double instantiation for a class that does not
    # exist to raise, protecting against incorrectly spelt names.
    mocks.verify_doubled_constant_names = true
  end

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
  #
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  config.filter_run :focus
  config.run_all_when_everything_filtered = true

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = 'spec/examples.txt'

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  # config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
end

FAKE_PRIVATE_PEM = <<PEM
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEAtVclMbY63F4r07wMHfTcWEkQf9APYvAn34k9JmBHO/7nIcQV
MhBeEA1OmZoD883SgCldSApmBm30WpGyCOWNF9BgPRFy2jJZFbeFPh0DFfcFeeL+
eqN+gnkls5zxPqWXySz0An9xB+5JonO5kanvbrorxeMp84Jq8X/4osB+pdV85MdX
39bBXsy2JNiJnKV6lzLZu4EYWujbTk4hzGDxKdC8+NZ8mfaDLtB3nGmn5uslFIvy
gcNvyFm2ZvS7l9fws6HD6KKnYBjUjgmsfuYdOIIVfw/sD+FcrDQNxq8Gi8IrD33Q
VD+lKh503k7Vuw39YAh5hky9jjnFRWiiOyTSjwIDAQABAoIBAFtPjkMB55GfOaJc
Rh2vdmReJhi1w4mmM+2zRT9Vq4jiSbAO9D1JUJP0n2doziSttxkhuv7TfZwvMaOJ
SYSBUhJzsoINjy+fuovc5RLpuOwOfotpaYqHWOSJ7BoNJMzOxSdfo16+nUPJEPrk
GsTmNNIknHYAdNdRDFief6w0EZGenUexLOhmZE18h3VXk7SJ7AA/ZqfZo31QPVjY
kv3mbFqsTKtb+ZRzOad4O5Ph5IX0Sh2pC9YOR7cl3TRK/DBbwLoIgpMPsUHuhCsR
dQKLs0UhHoDW0u62eGG1xmTWOlFTWdjWMtNH82RJ38Z2OajdhQPvNc57jXz1rvjq
rVzTssECgYEA21p1cK5qmdN0PpkOdghaREN6RVbRENA6dpKHa/5UB0Oc89MUhncU
B7Pj76UrPMcOBbq9dtbQIobtTUTSRDriScS6QZ3WlF/Cj4zhOlF4j+2YKwWCz9YF
EKUpe5916SN1EP+vfpyqKD+PVFE+1aC0Zi5bMXJTRwGkVrCY6oYbZ60CgYEA06Lo
bStwZnGVfwp2aSEA6+ZIImTPOFRZaXESRS09jTv3CJN5zwjn9Vim4B87AIFqrqI0
7vu8pMftdoWN47HrxqnSP5yDbggYqHmyt2fyEXmsYruqnzFozykAs9T0+phKx+xO
kfA5RrRW3mRN37bfiKkcW0XMcDcKIzBCqs1rGqsCgYBZcvDzK1zzL6R2pmmcPlm4
/p9MyVNl/NPqaGRq6IKRl8PYNhpnnwV/Ap+PqRYRqcaRFY6PeJfVjJoWaVspUa3X
kS629Ut8o/QuH6/03SZB4wyrdoragBb+q6tX6zXlBX2Gmg2RnwdQdGLZamwqJ2eJ
R5wOdOV6zjOa2lbxRBDG3QKBgQCMKbxdcQOEFX25IajCf4Uott7XSISk/dgpqSU8
g3Xcb/Zvy5xErdVR/GCo1oYxE4UgG3WLQVXynCZ89H7AajmI3TfNwU6aNOp/yfm+
1izPvhGZYkjiHcsYSEOa1lNZFDuSpMJ0jPCiDxXpO+0HWQo6bCXHnTaEqy8flvrQ
PDPO+QKBgHAf5k0PN6Xku09/c3GM6Grty8qjgCzVtCohI77XbKr4YG9IllrFCF0F
Ct4Bym1hD70oSjvXqXVqAfY63WbNNvUq4P33rCj0ZQLK3VW5R8ldSi3ZRtNueLZT
WP27MLo01gVTr6pafRNKuAt+5Ew7fl5z7LTxoxCUWYElkY5932fa
-----END RSA PRIVATE KEY-----
PEM
