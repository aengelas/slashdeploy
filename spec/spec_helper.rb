require 'codeclimate-test-reporter'
CodeClimate::TestReporter.start

require 'webmock/rspec'
WebMock.disable_net_connect!(allow: 'codeclimate.com')
require 'slash'
require 'slashdeploy'

# This file was generated by the `rails generate rspec:install` command. Conventionally, all
# specs live under a `spec` directory, which RSpec adds to the `$LOAD_PATH`.
# The generated `.rspec` file contains `--require spec_helper` which will cause
# this file to always be loaded, without a need to explicitly require it in any
# files.
#
# Given that it is always loaded, you are encouraged to keep this file as
# light-weight as possible. Requiring heavyweight dependencies from this file
# will add to the boot time of your test suite on EVERY test run, even for an
# individual file that may not need all of that loaded. Instead, consider making
# a separate helper file that requires the additional dependencies and performs
# the additional setup, and require it from the spec files that actually need
# it.
#
# The `.rspec` file also contains a few flags that are not defaults but that
# users commonly want.
#
# See http://rubydoc.info/gems/rspec-core/RSpec/Core/Configuration
RSpec.configure do |config|
  # rspec-expectations config goes here. You can use an alternate
  # assertion/expectation library such as wrong or the stdlib/minitest
  # assertions if you prefer.
  config.expect_with :rspec do |expectations|
    # This option will default to `true` in RSpec 4. It makes the `description`
    # and `failure_message` of custom matchers include text for helper methods
    # defined using `chain`, e.g.:
    #     be_bigger_than(2).and_smaller_than(4).description
    #     # => "be bigger than 2 and smaller than 4"
    # ...rather than:
    #     # => "be bigger than 2"
    expectations.include_chain_clauses_in_custom_matcher_descriptions = true
  end

  # rspec-mocks config goes here. You can use an alternate test double
  # library (such as bogus or mocha) by changing the `mock_with` option here.
  config.mock_with :rspec do |mocks|
    # Prevents you from mocking or stubbing a method that does not exist on
    # a real object. This is generally recommended, and will default to
    # `true` in RSpec 4.
    mocks.verify_partial_doubles = true

    # This option should be set when all dependencies are being loaded
    # before a spec run, as is the case in a typical spec helper. It will
    # cause any verifying double instantiation for a class that does not
    # exist to raise, protecting against incorrectly spelt names.
    mocks.verify_doubled_constant_names = true
  end

  # The settings below are suggested to provide a good initial experience
  # with RSpec, but feel free to customize to your heart's content.
  #
  # These two settings work together to allow you to limit a spec run
  # to individual examples or groups you care about by tagging them with
  # `:focus` metadata. When nothing is tagged with `:focus`, all examples
  # get run.
  if ENV['CI']
    config.before(:example, :focus) { fail 'Should not commit focused specs' }
  else
    config.filter_run :focus
    config.run_all_when_everything_filtered = true
  end

  # Allows RSpec to persist some state between runs in order to support
  # the `--only-failures` and `--next-failure` CLI options. We recommend
  # you configure your source control system to ignore this file.
  config.example_status_persistence_file_path = 'spec/examples.txt'

  # Limits the available syntax to the non-monkey patched syntax that is
  # recommended. For more details, see:
  #   - http://rspec.info/blog/2012/06/rspecs-new-expectation-syntax/
  #   - http://www.teaisaweso.me/blog/2013/05/27/rspecs-new-message-expectation-syntax/
  #   - http://rspec.info/blog/2014/05/notable-changes-in-rspec-3/#zero-monkey-patching-mode
  config.disable_monkey_patching!

  # Many RSpec users commonly either run the entire suite or an individual
  # file, and it's useful to allow more verbose output when running an
  # individual spec file.
  if config.files_to_run.one?
    # Use the documentation formatter for detailed output,
    # unless a formatter has already been configured
    # (e.g. via a command-line flag).
    config.default_formatter = 'doc'
  end

  # Print the 10 slowest examples and example groups at the
  # end of the spec run, to help surface which specs are running
  # particularly slow.
  # config.profile_examples = 10

  # Run specs in random order to surface order dependencies. If you find an
  # order dependency and want to debug it, you can fix the order by providing
  # the seed, which is printed after each run.
  #     --seed 1234
  config.order = :random

  # Seed global randomization in this process using the `--seed` CLI option.
  # Setting this allows you to use `--seed` to deterministically reproduce
  # test failures related to randomization by passing the same `--seed` value
  # as the one that triggered the failure.
  Kernel.srand config.seed
end

GITHUB_APP_PEM = <<EOF
-----BEGIN RSA PRIVATE KEY-----
MIIEowIBAAKCAQEA212Yx0HhyDmPrJqGNjsoc6tZ0cu8qicykaaGuGmMU8ihtjKC
RXrZFEckpRBCR94rp1T2GjooMXRK1WumIxU+y+ZYq+V1G6Q/X3tTC5M5rbZxBinF
RcBWNi+k5jIzJgGfbbLe8eJ/lJoKR2LjUmUOcW+i55Ba9Zf0ysdMo5ZwL33/OEB0
xCFwUqeq4JdQJQRhq8ZuykHsTFySgZkyLEyFw74Fb5N2x5XM+yuoe3K2LduwEVZj
Yhb+jassR0xdERuD5/YAYREnC1mP/shXVofqamEpE19QnJha0MM93YTsvmy1aYCy
pmQKNIlntDf2OZYIqWwfsARnd0NaWKrqRKCw3QIDAQABAoIBAQCHMK6IFjUUVU0T
HYQbBehPKMnI/pt97Xw/wPYDzqB5vgrTI1ufgC8qTRHrXBLNAcG7dSPaU/8TQ00f
LCGOO3ig5ou9HENIzrdzm6g5WPlR8j7Dgpid/QPkjwY8C7Hz+UoMrBCz11ey+B/f
kLTxwW/ePuORfChidMya76puorbuvL5RvkJaEttgdJk6P+aCBQaDgrJXuC68W0MB
Hg86JLzcDpOfNMHoSP4OFtn0XCSndLN3nQhDgS6csC0/Lb1OMBgC9APD7NF/XI2S
ZWGJ9efWft9cVPXb9cDfkCbeVq3e4q09QHYLSFkFo/QdwI1+4e+GctvSVbDFgLG7
a18dX9OhAoGBAPiQmRIw7HvNTCiolIfhnGswYlnTwt6clkZVTMpq2XcxkBU/ZPOn
mjwYPjzXuxSb6r4yKNJNlz9C8OUzpU8upU+Ez9NcYcolTipSI7I680M1G8pQrmAj
C++J3+TzfA/YrKWG2jVBbGnpbgprG5Op5OtpTI6WsHYf20Ath14DlvgpAoGBAOHt
Z2E0LkwJ/N9kxYRpY3WObhdRb42kWlcfkhSoklSSumX4DzgQ2Ol4iEXMVTi/s69f
wtk56VmTIc8OxAlXKTyWvkKeq/gceMDYfgG4wApegpsgMU8WhtrjFyeCidWhT77b
MSb49YuUZ2HDKHh+35qBt3BCOEGQmD81i7jFHFmVAoGAHGCVuSfwt6mWekXUvzaY
nvwlHlA4vSVvWpQ+chWEwkDcTDCym8aUqyuxX0zZxN6QDCq50lidXdGMov4kb0fK
A6wL9ftkBqn/pIFAJgbo4tFbXNudLMiTgkNhVkgd78ky3Krqmo3fjK/jqjjUKyWI
Rv/8h4LYnoPAijEodSk/wRECgYB6XcMoesK4nJBBzqrMVOhxu3sVVh49cU8c8RSF
6+eVtwMOR5S2oSlbCtWEOG/QFMSVsCAw15Tz1yTwqOa0yGilUGAsZRRvhbxBdwCI
njAlbZr/uif61hCkbWsVEzbkZkJy9PViTmVv/CkiYjmBSfaCEM/yFWuy10Yetjm/
EcORIQKBgDCBmuNPhrkBedMOWkquvSnpXMnJzsVgTlnIbJ2K56Jt3plIQcQwUxwU
xySVFE3RF9ZwOEStXinvUD+2m3g6MaWNFEkQ77tdeMkE50WjQmQK4+OxZUFaOI5K
Pe5W5PHvI3Eb2KLTauN2hesuwkEa3wV9qHpcrgeSyK18M300fspy
-----END RSA PRIVATE KEY-----
EOF
