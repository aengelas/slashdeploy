<div class="row">
  <div class="col-md-3">
    <ul class="nav nav-pills nav-stacked">
      <li role="presentation"><a href="#installation">Installation</a></li>
      <li role="presentation"><a href="#slash-command">Slash Command</a></li>
      <li role="presentation"><a href="#continuous-delivery">Continuous Delivery</a></li>
      <li role="presentation"><a href="#faq">FAQ</a></li>
      <li role="presentation"><a href="#troubleshooting">Troubleshooting</a></li>
    </ul>
  </div>
  <div class="col-md-9">
    <% if Rails.configuration.x.beta %>
    <div class="bs-callout bs-callout-warning">
      <h4>Warning</h4>
      <p>As SlashDeploy is still in beta, the documentation here is subject to change and some parts may be incomplete. If you have feedback, please send it to <%= feedback_email %>.</p>
    </div>
    <% end %>

    <h5 id="installation">Installation</h5>
    <p>The easiest way to install SlashDeploy is to use our Add to Slack button:</p>
    <p><%= add_to_slack %></p>
    <p>This allows us to automatically install the <code>/deploy</code> command as well as a <code>@slashdeploy</code> bot user, which is used to send you notifications when deployments start and end.</p>

    <hr />

    <h5 id="slash-command">Slash Command</h5>
    <p>Once SlashDeploy is installed into your Slack team, you'll have access to the <code>/deploy</code> command. The first time you type <code>/deploy</code> you'll be asked to authenticate with GitHub so that SlashDeploy can create GitHub Deployments on your behalf.</p>

    <hr />

    <h6>Deploying</h6>
    <p>To deploy the default ref (master) to the default environment (production).</p>
    <p><code>/deploy acme-inc/api</code></p>
    <p>To deploy the default ref (master) to a different environment.</p>
    <p><code>/deploy acme-inc/api to staging</code></p>
    <p>To deploy a branch (or git sha, or git tag) to the default environment.</p>
    <p><code>/deploy acme-inc/api@branch</code></p>
    <p>By default, all GitHub commit statuses will be checked before creating a deployment, you can disable this check by using the <code>!</code> flag.</p>
    <p><code>/deploy acme-inc/api@branch!</code></p>
    <p>To find out what environments you can deploy the repo to.</p>
    <p><code>/deploy where acme-inc/api</code></p>

    <hr />

    <h6>Locking</h6>
    <p>SlashDeploy also allows you to "lock" environments. If for example, I wanted to test a migration on the staging environment, I can lock it with a message.</p>
    <p><code>/deploy lock staging on acme-inc/api: I'm testing a migration</code></p>
    <p>If any of my other team members try to deploy to the staging environment, they'll see the lock message.</p>
    <p><code>/deploy acme-inc/api to staging</code></p>
    <p>When I'm done testing my changes, I can unlock the environment so others can deploy to it again.</p>
    <p><code>/deploy unlock staging on acme-inc/api</code></p>

    <hr />

    <h5 id="continuous-delivery">Continuous Delivery</h5>
    <p>You can configure SlashDeploy to automatically deploy a branch to an environment when you push code to GitHub or when a set of commit status contexts succeeds.</p>
    <p>To configure CD, you add a <code>.slashdeploy.yml</code> file to the root of the repository. Here's an example config file that will automatically deploy the <code>master</code> branch to the <code>production</code> environment, once tests are passing on CircleCI:</p>
    <p>
      <pre>---
production:
  
  # Allows us to reference this using "production" or a short alias, "prod".
  aliases:
    - prod

  # Enable continuous delivery for this environment.
  continuous_delivery:
    # You can specify any git "ref" (tag, branch, etc) to auto deploy when
    # pushed to.
    ref: refs/heads/master

    # If you want to only deploy when a set of GitHub commit statuses are
    # passing, you can configure those here. If none are provided, SlashDeploy
    # will deploy when new commits are pushed to the git ref.
    required_contexts:
      - ci/circleci</pre>
    </p>

    <hr />

    <h5 id="faq">FAQ</h5>
    <dl>
      <dt>What's GitHub Deployments?</dt>
      <dd>In a nutshell, GitHub Deployments are a way to initialize a deployment <strong>request</strong> for a GitHub repository. It allows you to decouple the act of requesting a deployment, and the actual fullfillment. This allows you to have a consistent interface for performing deployments, whether it's a web app, infrastructure, native application, etc.</dd>
      <br />
      <dt>How does SlashDeploy know who I am on GitHub?</dt>
      <dd>When you first run the /deploy command, we ask you to authenticate with your GitHub account, which is then linked to your Slack user account.</dd>
    </dl>

    <hr />

    <h5 id="troubleshooting">Troubleshooting</h5>
    <p>Here we have some debugging information about the common issues and how to resolve them.
    <dl>
        <dt id="error-1">Error 1: <small>The deployment did not start</small></dt>
      <dd>If a deployment does not start in
      <%= time_ago_in_words(GithubDeploymentWatchdogWorker::DEFAULT_DELAY.from_now, include_seconds: true) %>, 
      you will get a Slack notification letting you know something went wrong. This might happen for a number of reasons, so check the following.
      <ul>
        <li>make sure the repo's <code>slashdeploy.yml</code> file is configured properly</li>
        <li>make sure the repo has a Github Deployment Integration (and Webhooks) to handle deployment events</li>
        <li>make sure the service handling the deployment events is working and sending Deployment Status updates to Github</li>
        <li>make sure the service handling the deployment events is not filtering or ignoring deployment requests. For example, it will deploy to <code>production</code>, however the  provided environment in the deployment event was <code>prod</code>.
      </dd>
      <dt id="error-2">Error 2: <small>A required commit status context is stuck in pending</small></dt>
      <dd>Inside the repo's <code>slashdeploy.yml</code> a list of <code>required_contexts</code> was defined which need to move into the <code>success</code> state in order to continue. For some reason, after <%= time_ago_in_words(AutoDeploymentWatchdogWorker::DEFAULT_DELAY.from_now) %> of waiting, at least one of these <code>required_contexts</code> are stuck in the <code>pending</code> state instead of transitioning to <code>success</code>, <code>failure</code>, or <code>error</code>. If you fix this issue your deployment will likely continue.</dd>
    </dl>

  </div>
</div>
